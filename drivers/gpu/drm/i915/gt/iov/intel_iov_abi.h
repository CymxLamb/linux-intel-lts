/* SPDX-License-Identifier: MIT */
/*
 * Copyright Â© 2020 Intel Corporation
 */

#ifndef __INTEL_IOV_ABI_H__
#define __INTEL_IOV_ABI_H__

/**
 * DOC: GUC_ACTION_MMIO_RELAY_SERVICE
 *
 * NOTE: this action is deprecated and will be removed!
 *
 * This action is supported only over MMIO and is available only for VFs.
 * This H2G action allows VFs to exchange information with PF using GuC.
 * As this action may take longer time to complete than normal H2G message,
 * VFs may see BUSY message before getting final RESPONSE or ERROR message.
 * All DATA fields used in these messages are opaque to the GuC.
 * Format of the DATA fields depends on the subcode.
 *
 * MMIO Request::
 *      +=======================================================+
 *      | 0 | 31:28 | type = REQUEST(0)                         |
 *      |   | 27:24 | magic = to be generated by the VF         |
 *      |   | 23:16 | subcode = TBD                             |
 *      |   |  15:0 | action = VFPF_MMIO_RELAY_SERVICE(5005)    |
 *      +=======================================================+
 *      | 1 |  31:0 | data1 = TBD (depends on subcode)          |
 *      | 2 |  31:0 | data2 = TBD (depends on subcode)          |
 *      | 3 |  31:0 | data3 = TBD (depends on subcode)          |
 *      +=======================================================+
 *
 * MMIO Response::
 *      +=======================================================+
 *      | 0 | 31:28 | type = RESPONSE(F)                        |
 *      |   | 27:24 | magic = same as in request                |
 *      |   |  23:0 | data0 = TBD (depends on subcode)          |
 *      +=======================================================+
 *      | 1 |  31:0 | data1 = TBD (depends on subcode)          |
 *      | 2 |  31:0 | data2 = TBD (depends on subcode)          |
 *      | 3 |  31:0 | data3 = TBD (depends on subcode)          |
 *      +=======================================================+
 *
 */
#define GUC_MMIO_RELAY_REQ_MSG_LEN		4u
#define GUC_MMIO_RELAY_REQ_DATA_LEN		(GUC_MMIO_RELAY_REQ_MSG_LEN - 1)
#define GUC_MMIO_RELAY_REQ_DATA1		(0xFFFFFFFF << 0)
#define GUC_MMIO_RELAY_REQ_DATA2		(0xFFFFFFFF << 0)
#define GUC_MMIO_RELAY_REQ_DATA3		(0xFFFFFFFF << 0)
#define GUC_MMIO_RELAY_RESP_MSG_LEN		4u
#define GUC_MMIO_RELAY_RESP_DATA_LEN		(GUC_MMIO_RELAY_RESP_MSG_LEN - 1)
#define GUC_MMIO_RELAY_RESP_DATA0		(0xFFFFFF << 0)
#define GUC_MMIO_RELAY_RESP_DATA1		(0xFFFFFFFF << 0)
#define GUC_MMIO_RELAY_RESP_DATA2		(0xFFFFFFFF << 0)
#define GUC_MMIO_RELAY_RESP_DATA3		(0xFFFFFFFF << 0)

/**
 * DOC: GUC_NOTIFICATION_MMIO_RELAY_SERVICE
 *
 * This G2H CTB message is part of the MMIO RELAY SERVICE.
 * This notification message is only delivered to the PF.
 *
 * See GUC_ACTION_MMIO_RELAY_SERVICE for details.
 *
 * CTB message format::
 *      +=======================================================+
 *      | CTB HEADER                                            |
 *      +=======================================================+
 *      |   |       | action = 0x5006                           |
 *      |   |       | payload len = 5                           |
 *      +=======================================================+
 *      | CTB PAYLOAD                                           |
 *      +=======================================================+
 *      | 0 |  31:0 | origin = VFID = (1..total_vfs)            |
 *      +-------------------------------------------------------+
 *      | 1 | 31:28 | reserved = MBZ                            |
 *      |   | 27:24 | magic = message sequence number           |
 *      |   | 23:16 | subcode = see MMIO_RELAY subcodes         |
 *      |   |  15:0 | reserved = MBZ                            |
 *      +-------------------------------------------------------+
 *      | 2 |  31:0 | mmio relay data1                          |
 *      | 3 |  31:0 | mmio relay data2                          |
 *      | 4 |  31:0 | mmio relay data3                          |
 *      +=======================================================+
 */
#define GUC_MMIO_RELAY_NOTIF_LEN			5u
#define GUC_MMIO_RELAY_NOTIF_0_ORIGIN			(0xFFFFFFFF << 0)
#define GUC_MMIO_RELAY_NOTIF_1_MAGIC			(0xF << 24)
#define GUC_MMIO_RELAY_NOTIF_1_SUBCODE			(0xFF << 16)
#define GUC_MMIO_RELAY_NOTIF_2_DATA1			(0xFFFFFFFF << 0)
#define GUC_MMIO_RELAY_NOTIF_3_DATA2			(0xFFFFFFFF << 0)
#define GUC_MMIO_RELAY_NOTIF_4_DATA3			(0xFFFFFFFF << 0)

/**
 * DOC: GUC_ACTION_MMIO_RELAY_SUCCESS
 *
 * This H2G CTB message is part of the MMIO RELAY SERVICE.
 * This action is used by the PF to reply successful response to the VF.
 *
 * See GUC_NOTIFICATION_MMIO_RELAY_SERVICE.
 * See GUC_ACTION_MMIO_RELAY_SERVICE.
 *
 * CTB message format::
 *      +===============================================+
 *      | CTB HEADER                                    |
 *      +===============================================+
 *      |   |       | action = 0x5007                   |
 *      |   |       | payload len = 5                   |
 *      +===============================================+
 *      | CTB PAYLOAD                                   |
 *      +===============================================+
 *      | 0 |  31:0 | target = VFID = (1..total_vfs)    |
 *      +-----------------------------------------------+
 *      | 1 | 31:28 | reserved = MBZ                    |
 *      |   | 27:24 | magic = message sequence number   |
 *      |   |  23:0 | data0 = see MMIO_RELAY_SERVICE    |
 *      +-----------------------------------------------+
 *      | 2 |  31:0 | data1 = see MMIO_RELAY_SERVICE    |
 *      | 3 |  31:0 | data2 = see MMIO_RELAY_SERVICE    |
 *      | 4 |  31:0 | data3 = see MMIO_RELAY_SERVICE    |
 *      +===============================================+
 */
#define GUC_MMIO_RELAY_SUCCESS_REQ_LEN			5u
#define GUC_MMIO_RELAY_SUCCESS_REQ_0_TARGET		(0xFFFFFFFF << 0)
#define GUC_MMIO_RELAY_SUCCESS_REQ_1_MBZ		(0xF << 28)
#define GUC_MMIO_RELAY_SUCCESS_REQ_1_MAGIC		(0xF << 24)
#define GUC_MMIO_RELAY_SUCCESS_REQ_1_DATA0		(0xFFFFFF << 0)
#define GUC_MMIO_RELAY_SUCCESS_REQ_2_DATA1		(0xFFFFFFFF << 0)
#define GUC_MMIO_RELAY_SUCCESS_REQ_3_DATA2		(0xFFFFFFFF << 0)
#define GUC_MMIO_RELAY_SUCCESS_REQ_4_DATA3		(0xFFFFFFFF << 0)

/**
 * DOC: GUC_ACTION_MMIO_RELAY_FAILURE
 *
 * This H2G CTB message is part of the MMIO RELAY SERVICE.
 * This action is used by the PF to reply error response to the VF.
 *
 * See GUC_NOTIFICATION_MMIO_RELAY_SERVICE.
 * See GUC_ACTION_MMIO_RELAY_SERVICE.
 *
 * CTB message format::
 *      +===============================================+
 *      | CTB HEADER                                    |
 *      +===============================================+
 *      |   |       | action = 0x5008                   |
 *      |   |       | payload len = 2                   |
 *      +===============================================+
 *      | CTB PAYLOAD                                   |
 *      +===============================================+
 *      | 0 |  31:0 | target = VFID = (1..total_vfs)    |
 *      +-----------------------------------------------+
 *      | 1 | 31:28 | reserved = MBZ                    |
 *      |   | 27:24 | magic = message sequence number   |
 *      |   |  23:8 | reserved = MBZ                    |
 *      |   |   7:0 | error = failure code              |
 *      +===============================================+
 */
#define GUC_MMIO_RELAY_FAILURE_REQ_LEN			2u
#define GUC_MMIO_RELAY_FAILURE_REQ_0_TARGET		(0xFFFFFFFF << 0)
#define GUC_MMIO_RELAY_FAILURE_REQ_1_MBZ		(0xF << 28)
#define GUC_MMIO_RELAY_FAILURE_REQ_1_MAGIC		(0xF << 24)
#define GUC_MMIO_RELAY_FAILURE_REQ_1_RESERVED		(0xFFFFF << 8)
#define GUC_MMIO_RELAY_FAILURE_REQ_1_ERROR		(0xFF << 0)

/**
 * DOC: GUC_ACTION_VFPF_GET_REG
 *
 * This action allows VFs retrieve from the PF values of some registers (fuses).
 * Only registers that are on the whitelist maintained by the PF are available.
 * This action is based on GuC relay over MMIO service, it may take longer time
 * to completion and VFs should expect intermediate BUSY response message.
 *
 * See GUC_ACTION_MMIO_RELAY_SERVICE.
 *
 * Request::
 *      +=======================================================+
 *      | 0 | 31:28 | type = REQUEST(0)                         |
 *      |   | 27:24 | magic = to be generated by the VF         |
 *      |   | 23:16 | subcode = VFPF_GET_REG(0x10)              |
 *      |   |  15:0 | action = VF_MMIO_RELAY_SERVICE(0x5005)    |
 *      +=======================================================+
 *      | 1 |  31:0 | data1 = offset of register1               |
 *      | 2 |  31:0 | data2 = offset of register2 or zero       |
 *      | 3 |  31:0 | data3 = offset of register3 or zero       |
 *      +=======================================================+
 *
 * Response::
 *      +=======================================================+
 *      | 0 | 31:28 | type = RESPONSE(F)                        |
 *      |   | 27:24 | magic = same as in request                |
 *      |   |  23:0 | data0 = MBZ                               |
 *      +=======================================================+
 *      | 1 |  31:0 | data1 = value of register1                |
 *      | 2 |  31:0 | data2 = value of register2 or zero        |
 *      | 3 |  31:0 | data3 = value of register3 or zero        |
 *      +=======================================================+
 */
#define MMIO_RELAY_SUBCODE_VFPF_GET_REG			0x10
#define VFPF_GET_REG_DATA_MAX				3

#endif /* __INTEL_IOV_ABI_H__ */
